{"ast":null,"code":"import _slicedToArray from \"/Users/chaehyun/wk3/blank/start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/chaehyun/wk3/blank/start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/chaehyun/wk3/blank/start/src/Scene1.js\";\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { useFrame, useResource } from 'react-three-fiber';\nimport { Text, Box, useMatcapTexture, Octahedron } from '@react-three/drei';\nimport useSlerp from './use-slerp';\nimport useLayers from './use-layers';\nimport useRenderTarget from './use-render-target';\nimport { ThinFilmFresnelMap } from './ThinFilmFresnelMap';\nimport { mirrorsData } from './data';\nvar TEXT_PROPS = {\n  fontSize: 2.5,\n  font: 'https://fonts.gstatic.com/s/syncopate/v12/pe0pMIuPIYBCpEV5eFdKvtKqBP5p.woff'\n};\n\nfunction Title(_ref) {\n  var layers = _ref.layers,\n      props = _objectWithoutProperties(_ref, [\"layers\"]);\n\n  var group = useRef();\n  useEffect(function () {\n    group.current.lookAt(0, 0, 0);\n  }, []);\n  var textRef = useLayers(layers);\n  return /*#__PURE__*/React.createElement(\"group\", Object.assign({}, props, {\n    ref: group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Text, Object.assign({\n    ref: textRef,\n    name: \"text-panna\",\n    depthTest: false,\n    \"material-toneMapped\": false,\n    \"material-color\": \"#FFFFFF\"\n  }, TEXT_PROPS, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), \"PANNA\"));\n}\n\nfunction Mirror(_ref2) {\n  var sideMaterial = _ref2.sideMaterial,\n      reflectionMaterial = _ref2.reflectionMaterial,\n      args = _ref2.args,\n      layers = _ref2.layers,\n      props = _objectWithoutProperties(_ref2, [\"sideMaterial\", \"reflectionMaterial\", \"args\", \"layers\"]);\n\n  var ref = useLayers(layers);\n  useFrame(function () {\n    if (ref.current) {\n      ref.current.rotation.y += 0.001;\n      ref.current.rotation.z += 0.01;\n    }\n  });\n  return /*#__PURE__*/React.createElement(Box, Object.assign({}, props, {\n    ref: ref,\n    args: args,\n    material: [sideMaterial, sideMaterial, sideMaterial, sideMaterial, reflectionMaterial, reflectionMaterial],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }));\n}\n\nfunction Mirrors(_ref3) {\n  var _this = this;\n\n  var envMap = _ref3.envMap,\n      layers = _ref3.layers,\n      props = _objectWithoutProperties(_ref3, [\"envMap\", \"layers\"]);\n\n  var _useState = useState(new ThinFilmFresnelMap()),\n      _useState2 = _slicedToArray(_useState, 1),\n      thinFilmFresnelMap = _useState2[0];\n\n  var sideMaterial = useResource();\n  var reflectionMaterial = useResource();\n  return /*#__PURE__*/React.createElement(\"group\", Object.assign({\n    name: \"mirrors\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLambertMaterial\", {\n    ref: sideMaterial,\n    map: thinFilmFresnelMap,\n    color: \"#AAAAAA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLambertMaterial\", {\n    ref: reflectionMaterial,\n    map: thinFilmFresnelMap,\n    envMap: envMap,\n    color: \"#FFFFFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), mirrorsData.mirrors.map(function (mirror, index) {\n    return /*#__PURE__*/React.createElement(Mirror, Object.assign({\n      key: \"mirror-\".concat(index),\n      layers: layers\n    }, mirror, {\n      name: \"mirror-\".concat(index),\n      sideMaterial: sideMaterial.current,\n      reflectionMaterial: reflectionMaterial.current,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }));\n  }));\n}\n\nfunction TitleCopies(_ref4) {\n  var _this2 = this;\n\n  var layers = _ref4.layers;\n  var vertices = useMemo(function () {\n    var y = new THREE.IcosahedronGeometry(10);\n    return y.vertices;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"group\", {\n    name: \"titleCopies\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, vertices.map(function (vertex, i) {\n    return /*#__PURE__*/React.createElement(Title, {\n      name: 'titleCopy-' + i,\n      position: vertex,\n      layers: layers,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    });\n  }));\n}\n\nvar clickMe = function clickMe() {\n  // document.history.href.back();\n  window.history.back(); // console.log(hovered)\n  // document.location.href = 'http://localhost:8000'\n};\n\nfunction Scene() {\n  var _useRenderTarget = useRenderTarget(),\n      _useRenderTarget2 = _slicedToArray(_useRenderTarget, 2),\n      cubeCamera = _useRenderTarget2[0],\n      renderTarget = _useRenderTarget2[1];\n\n  var group = useSlerp();\n\n  var _useMatcapTexture = useMatcapTexture('C8D1DC_575B62_818892_6E747B'),\n      _useMatcapTexture2 = _slicedToArray(_useMatcapTexture, 1),\n      matcapTexture = _useMatcapTexture2[0];\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"group\", {\n    name: \"sceneContainer\",\n    ref: group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Octahedron, {\n    layers: [11],\n    name: \"background\",\n    args: [20, 4, 4],\n    position: [0, 0, -5],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"meshMatcapMaterial\", {\n    matcap: matcapTexture,\n    side: THREE.BackSide,\n    transparent: true,\n    opacity: 0.3,\n    color: \"#FFFFFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    layers: [11],\n    name: \"cubeCamera\",\n    ref: cubeCamera,\n    args: [0.1, 100, renderTarget],\n    position: [0, 0, 5],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    onClick: function onClick() {\n      return clickMe();\n    },\n    name: \"title\",\n    position: [0, 0, -10],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TitleCopies, {\n    layers: [11],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Mirrors, {\n    layers: [0, 11],\n    envMap: renderTarget.texture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/chaehyun/wk3/blank/start/src/Scene1.js"],"names":["React","useEffect","useMemo","useRef","useState","THREE","useFrame","useResource","Text","Box","useMatcapTexture","Octahedron","useSlerp","useLayers","useRenderTarget","ThinFilmFresnelMap","mirrorsData","TEXT_PROPS","fontSize","font","Title","layers","props","group","current","lookAt","textRef","Mirror","sideMaterial","reflectionMaterial","args","ref","rotation","y","z","Mirrors","envMap","thinFilmFresnelMap","mirrors","map","mirror","index","TitleCopies","vertices","IcosahedronGeometry","vertex","i","clickMe","window","history","back","Scene","cubeCamera","renderTarget","matcapTexture","BackSide","texture"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport { useFrame, useResource } from 'react-three-fiber'\nimport { Text, Box, useMatcapTexture, Octahedron } from '@react-three/drei'\n\nimport useSlerp from './use-slerp'\nimport useLayers from './use-layers'\nimport useRenderTarget from './use-render-target'\n\nimport { ThinFilmFresnelMap } from './ThinFilmFresnelMap'\nimport { mirrorsData } from './data'\n\nconst TEXT_PROPS = {\n  fontSize: 2.5,\n  font: 'https://fonts.gstatic.com/s/syncopate/v12/pe0pMIuPIYBCpEV5eFdKvtKqBP5p.woff'\n}\n\nfunction Title({ layers, ...props }) {\n  const group = useRef()\n  useEffect(() => {\n    group.current.lookAt(0, 0, 0)\n  }, [])\n\n  const textRef = useLayers(layers)\n\n  return (\n    <group {...props} ref={group}>\n      <Text ref={textRef} name=\"text-panna\" depthTest={false} material-toneMapped={false} material-color=\"#FFFFFF\" {...TEXT_PROPS}>\n        PANNA\n      </Text>\n    </group>\n  )\n}\n\nfunction Mirror({ sideMaterial, reflectionMaterial, args, layers, ...props }) {\n  const ref = useLayers(layers)\n\n  useFrame(() => {\n    if (ref.current) {\n      ref.current.rotation.y += 0.001\n      ref.current.rotation.z += 0.01\n    }\n  })\n\n  return (\n    <Box\n      {...props}\n      ref={ref}\n      args={args}\n      material={[sideMaterial, sideMaterial, sideMaterial, sideMaterial, reflectionMaterial, reflectionMaterial]}\n    />\n  )\n}\n\nfunction Mirrors({ envMap, layers, ...props }) {\n  const [thinFilmFresnelMap] = useState(new ThinFilmFresnelMap())\n  const sideMaterial = useResource()\n  const reflectionMaterial = useResource()\n\n  return (\n    <group name=\"mirrors\" {...props}>\n      <meshLambertMaterial ref={sideMaterial} map={thinFilmFresnelMap} color=\"#AAAAAA\" />\n      <meshLambertMaterial ref={reflectionMaterial} map={thinFilmFresnelMap} envMap={envMap} color=\"#FFFFFF\" />\n      {mirrorsData.mirrors.map((mirror, index) => (\n        <Mirror\n          key={`mirror-${index}`}\n          layers={layers}\n          {...mirror}\n          name={`mirror-${index}`}\n          sideMaterial={sideMaterial.current}\n          reflectionMaterial={reflectionMaterial.current}\n        />\n      ))}\n    </group>\n  )\n}\n\nfunction TitleCopies({ layers }) {\n  const vertices = useMemo(() => {\n    const y = new THREE.IcosahedronGeometry(10)\n    return y.vertices\n  }, [])\n\n  return (\n    <group name=\"titleCopies\">\n      {vertices.map((vertex, i) => (\n        <Title name={'titleCopy-' + i} position={vertex} layers={layers} />\n      ))}\n    </group>\n  )\n}\n\nconst clickMe = () => {\n  // document.history.href.back();\n  window.history.back();\n  // console.log(hovered)\n  // document.location.href = 'http://localhost:8000'\n}\n\nfunction Scene() {\n  const [cubeCamera, renderTarget] = useRenderTarget()\n  const group = useSlerp()\n\n  const [matcapTexture] = useMatcapTexture('C8D1DC_575B62_818892_6E747B')\n\n  return (\n    <>\n      <group name=\"sceneContainer\" ref={group}>\n        <Octahedron layers={[11]} name=\"background\" args={[20, 4, 4]} position={[0, 0, -5]}>\n          <meshMatcapMaterial matcap={matcapTexture} side={THREE.BackSide} transparent opacity={0.3} color=\"#FFFFFF\" />\n        </Octahedron>\n        <cubeCamera\n          layers={[11]}\n          name=\"cubeCamera\"\n          ref={cubeCamera}\n          args={[0.1, 100, renderTarget]}\n          position={[0, 0, 5]}\n        />\n        <Title\n            onClick={() => clickMe()} name=\"title\" position={[0, 0, -10]} />\n        <TitleCopies layers={[11]} />\n        <Mirrors layers={[0, 11]} envMap={renderTarget.texture} />\n      </group>\n    </>\n  )\n}\n\nexport default Scene"]},"metadata":{},"sourceType":"module"}