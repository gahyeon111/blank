{"ast":null,"code":"import _slicedToArray from \"/Users/chaehyun/Documents/GitHub/codrops-r3f-mirrors/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useMemo, useRef } from 'react';\nimport * as THREE from 'three';\nimport { useFrame, useThree } from 'react-three-fiber';\n\nfunction useSlerp() {\n  var group = useRef();\n\n  var _useThree = useThree(),\n      viewport = _useThree.viewport;\n\n  var _useMemo = useMemo(function () {\n    return [new THREE.Euler(0, 0, 0), new THREE.Quaternion(0, 0, 0, 0)];\n  }, []),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      rotationEuler = _useMemo2[0],\n      rotationQuaternion = _useMemo2[1];\n\n  useFrame(function (_ref) {\n    var mouse = _ref.mouse;\n    if (!group.current) return;\n    var x = mouse.x * viewport.width / 100;\n    var y = mouse.y * viewport.height / 100;\n    rotationEuler.set(y, x, 0);\n    rotationQuaternion.setFromEuler(rotationEuler);\n    group.current.quaternion.slerp(rotationQuaternion, 0.1);\n  });\n  return group;\n}\n\nexport default useSlerp;","map":{"version":3,"sources":["/Users/chaehyun/Documents/GitHub/codrops-r3f-mirrors/src/use-slerp.js"],"names":["useMemo","useRef","THREE","useFrame","useThree","useSlerp","group","viewport","Euler","Quaternion","rotationEuler","rotationQuaternion","mouse","current","x","width","y","height","set","setFromEuler","quaternion","slerp"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,mBAAnC;;AAEA,SAASC,QAAT,GAAoB;AAClB,MAAMC,KAAK,GAAGL,MAAM,EAApB;;AADkB,kBAEGG,QAAQ,EAFX;AAAA,MAEVG,QAFU,aAEVA,QAFU;;AAAA,iBAI0BP,OAAO,CACjD;AAAA,WAAM,CAAC,IAAIE,KAAK,CAACM,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAD,EAA2B,IAAIN,KAAK,CAACO,UAAV,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAA3B,CAAN;AAAA,GADiD,EAEjD,EAFiD,CAJjC;AAAA;AAAA,MAIXC,aAJW;AAAA,MAIIC,kBAJJ;;AASlBR,EAAAA,QAAQ,CAAC,gBAAe;AAAA,QAAZS,KAAY,QAAZA,KAAY;AACtB,QAAI,CAACN,KAAK,CAACO,OAAX,EAAoB;AAEpB,QAAMC,CAAC,GAAIF,KAAK,CAACE,CAAN,GAAUP,QAAQ,CAACQ,KAApB,GAA6B,GAAvC;AACA,QAAMC,CAAC,GAAIJ,KAAK,CAACI,CAAN,GAAUT,QAAQ,CAACU,MAApB,GAA8B,GAAxC;AACAP,IAAAA,aAAa,CAACQ,GAAd,CAAkBF,CAAlB,EAAqBF,CAArB,EAAwB,CAAxB;AACAH,IAAAA,kBAAkB,CAACQ,YAAnB,CAAgCT,aAAhC;AACAJ,IAAAA,KAAK,CAACO,OAAN,CAAcO,UAAd,CAAyBC,KAAzB,CAA+BV,kBAA/B,EAAmD,GAAnD;AACD,GARO,CAAR;AAUA,SAAOL,KAAP;AACD;;AAED,eAAeD,QAAf","sourcesContent":["import { useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useFrame, useThree } from 'react-three-fiber'\n\nfunction useSlerp() {\n  const group = useRef()\n  const { viewport } = useThree()\n\n  const [rotationEuler, rotationQuaternion] = useMemo(\n    () => [new THREE.Euler(0, 0, 0), new THREE.Quaternion(0, 0, 0, 0)],\n    []\n  )\n\n  useFrame(({ mouse }) => {\n    if (!group.current) return\n\n    const x = (mouse.x * viewport.width) / 100\n    const y = (mouse.y * viewport.height) / 100\n    rotationEuler.set(y, x, 0)\n    rotationQuaternion.setFromEuler(rotationEuler)\n    group.current.quaternion.slerp(rotationQuaternion, 0.1)\n  })\n\n  return group\n}\n\nexport default useSlerp\n"]},"metadata":{},"sourceType":"module"}