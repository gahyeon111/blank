{"ast":null,"code":"import _slicedToArray from \"/Users/stoone_j/3rd/maze/blank/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/stoone_j/3rd/maze/blank/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/stoone_j/3rd/maze/blank/src/start/Scene2.js\";\nimport React, { useMemo, useState, useRef } from 'react';\nimport * as THREE from 'three';\nimport { useFrame } from 'react-three-fiber';\nimport { Text, useMatcapTexture, Octahedron, useGLTFLoader } from '@react-three/drei';\nimport useSlerp from './use-slerp';\nimport useRenderTarget from './use-render-target';\nimport { ThinFilmFresnelMap } from './ThinFilmFresnelMap';\nimport { mirrorsData as diamondsData } from './data';\nimport useLayers from './use-layers';\nvar TEXT_PROPS = {\n  fontSize: 5,\n  font: 'https://fonts.gstatic.com/s/monoton/v10/5h1aiZUrOngCibe4TkHLRA.woff'\n};\n\nfunction Title(_ref) {\n  var material = _ref.material,\n      texture = _ref.texture,\n      _ref$map = _ref.map,\n      map = _ref$map === void 0 ? null : _ref$map,\n      layers = _ref.layers,\n      props = _objectWithoutProperties(_ref, [\"material\", \"texture\", \"map\", \"layers\"]);\n\n  // const textRef = useLayers(layers)\n  var textRef = useRef(); // const [hovered, hover] = useState(false)\n  // useFrame((state, delta) => (textRef.current.rotation.x += 0.01))\n\n  return /*#__PURE__*/React.createElement(\"group\", Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Text, Object.assign({\n    ref: textRef,\n    name: \"text-olga\",\n    depthTest: false,\n    position: [0, -1, 0]\n  }, TEXT_PROPS, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), \"HELLO\", /*#__PURE__*/React.createElement(\"meshPhysicalMaterial\", {\n    envMap: texture,\n    map: map,\n    roughness: 0,\n    metalness: 1,\n    color: \"#FFFFFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }))) // <mesh\n  //   onPointerOver={(event) => { hover(true); console.log(hovered) }}\n  //   onPointerOut={(event) => { hover(false); console.log(hovered) }}>\n  //   <Text ref={textRef} name=\"text-olga\" depthTest={false} position={[0, -1, 0]} {...TEXT_PROPS}>\n  //     HELLO\n  //     <meshPhysicalMaterial envMap={texture} map={hovered ? null : map} roughness={0} metalness={1} color={hovered ? \"#000000\" : \"#FFFFFF\"} />\n  //   </Text>\n  // </mesh>\n  ;\n}\n\nfunction Diamond(_ref2) {\n  var map = _ref2.map,\n      texture = _ref2.texture,\n      matcap = _ref2.matcap,\n      layers = _ref2.layers,\n      props = _objectWithoutProperties(_ref2, [\"map\", \"texture\", \"matcap\", \"layers\"]);\n\n  var ref = useLayers(layers);\n  useFrame(function () {\n    if (ref.current) {\n      ref.current.rotation.y += 0.001;\n      ref.current.rotation.z += 0.01;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({\n    ref: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"meshMatcapMaterial\", {\n    matcap: matcap,\n    transparent: true,\n    opacity: 0.9,\n    color: \"#14CEFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Diamonds(_ref3) {\n  var _this = this;\n\n  var layers = _ref3.layers,\n      props = _objectWithoutProperties(_ref3, [\"layers\"]);\n\n  var _useMatcapTexture = useMatcapTexture('2E763A_78A0B7_B3D1CF_14F209'),\n      _useMatcapTexture2 = _slicedToArray(_useMatcapTexture, 1),\n      matcapTexture = _useMatcapTexture2[0];\n\n  var _useGLTFLoader = useGLTFLoader(process.env.PUBLIC_URL + '/diamond.glb'),\n      nodes = _useGLTFLoader.nodes;\n\n  return /*#__PURE__*/React.createElement(\"group\", Object.assign({\n    name: \"diamonds\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }), diamondsData.mirrors.map(function (mirror, index) {\n    return /*#__PURE__*/React.createElement(Diamond, Object.assign({\n      key: \"diamond-\".concat(index),\n      name: \"diamond-\".concat(index)\n    }, mirror, {\n      geometry: nodes.Cylinder.geometry,\n      matcap: matcapTexture,\n      scale: [0.5, 0.5, 0.5],\n      layers: layers,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  }));\n}\n\nfunction Background(_ref4) {\n  var layers = _ref4.layers,\n      props = _objectWithoutProperties(_ref4, [\"layers\"]);\n\n  var ref = useLayers(layers); // const [matcapTexture] = useMatcapTexture('BA5DBA_F2BEF2_E69BE6_DC8CDC')\n\n  var _useMatcapTexture3 = useMatcapTexture('BAADA8_ECE6E7_9A8378_E3DCD3'),\n      _useMatcapTexture4 = _slicedToArray(_useMatcapTexture3, 1),\n      matcapTexture = _useMatcapTexture4[0];\n\n  return /*#__PURE__*/React.createElement(Octahedron, Object.assign({\n    ref: ref,\n    name: \"background\",\n    args: [20, 4, 4]\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"meshMatcapMaterial\", {\n    matcap: matcapTexture,\n    side: THREE.BackSide,\n    color: \"#FFFFFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar clickMe = function clickMe(hovered) {\n  // document.history.href.back();\n  // window.history.back();\n  console.log(hovered); // document.location.href = 'http://localhost:8000'\n};\n\nfunction Scene() {\n  var _useRenderTarget = useRenderTarget(),\n      _useRenderTarget2 = _slicedToArray(_useRenderTarget, 2),\n      cubeCamera = _useRenderTarget2[0],\n      renderTarget = _useRenderTarget2[1];\n\n  var thinFilmFresnelMap = useMemo(function () {\n    return new ThinFilmFresnelMap(410, 0, 5, 1024);\n  }, []);\n  var group = useSlerp(); // const ref = useRef()\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hovered = _useState2[0],\n      hover = _useState2[1];\n\n  var changeMap = function changeMap(hovered) {\n    ref.map = hovered ? null : thinFilmFresnelMap;\n  }; // useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Background, {\n    layers: [0, 11],\n    position: [0, 0, -5],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    layers: [11],\n    name: \"cubeCamera\",\n    ref: cubeCamera,\n    args: [0.1, 100, renderTarget],\n    position: [0, 0, -12],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    name: \"sceneContainer\",\n    ref: group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Diamonds, {\n    onClick: function onClick() {\n      return clickMe(hovered);\n    },\n    layers: [0, 11],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    name: \"text\",\n    position: [0, 0, -5],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    ref: ref,\n    onPointerOver: function onPointerOver(event) {\n      hover(true);\n      changeMap(hovered);\n    },\n    onPointerOut: function onPointerOut(event) {\n      hover(false);\n      changeMap(hovered);\n    } // onClick={() => clickMe(hovered)} \n    ,\n    layers: [0],\n    name: \"title\",\n    texture: renderTarget.texture,\n    map: thinFilmFresnelMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/stoone_j/3rd/maze/blank/src/start/Scene2.js"],"names":["React","useMemo","useState","useRef","THREE","useFrame","Text","useMatcapTexture","Octahedron","useGLTFLoader","useSlerp","useRenderTarget","ThinFilmFresnelMap","mirrorsData","diamondsData","useLayers","TEXT_PROPS","fontSize","font","Title","material","texture","map","layers","props","textRef","Diamond","matcap","ref","current","rotation","y","z","Diamonds","matcapTexture","process","env","PUBLIC_URL","nodes","mirrors","mirror","index","Cylinder","geometry","Background","BackSide","clickMe","hovered","console","log","Scene","cubeCamera","renderTarget","thinFilmFresnelMap","group","hover","changeMap","event"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport { Text, useMatcapTexture, Octahedron, useGLTFLoader } from '@react-three/drei'\n\nimport useSlerp from './use-slerp'\nimport useRenderTarget from './use-render-target'\nimport { ThinFilmFresnelMap } from './ThinFilmFresnelMap'\nimport { mirrorsData as diamondsData } from './data'\nimport useLayers from './use-layers'\n\nconst TEXT_PROPS = {\n  fontSize: 5,\n  font: 'https://fonts.gstatic.com/s/monoton/v10/5h1aiZUrOngCibe4TkHLRA.woff'\n}\n\nfunction Title({ material, texture, map = null, layers, ...props }) {\n  // const textRef = useLayers(layers)\n  const textRef = useRef();\n\n  // const [hovered, hover] = useState(false)\n\n  // useFrame((state, delta) => (textRef.current.rotation.x += 0.01))\n\n  return (\n    <group {...props}\n    // onPointerOver={(event) => { hover(true); console.log(hovered) }}\n    // onPointerOut={(event) => { hover(false); console.log(hovered) }}\n    >\n      <Text ref={textRef} name=\"text-olga\" depthTest={false} position={[0, -1, 0]} {...TEXT_PROPS}>\n        HELLO\n        <meshPhysicalMaterial envMap={texture} map={map} roughness={0} metalness={1} color=\"#FFFFFF\" />\n      </Text>\n    </group>\n    // <mesh\n    //   onPointerOver={(event) => { hover(true); console.log(hovered) }}\n    //   onPointerOut={(event) => { hover(false); console.log(hovered) }}>\n    //   <Text ref={textRef} name=\"text-olga\" depthTest={false} position={[0, -1, 0]} {...TEXT_PROPS}>\n    //     HELLO\n    //     <meshPhysicalMaterial envMap={texture} map={hovered ? null : map} roughness={0} metalness={1} color={hovered ? \"#000000\" : \"#FFFFFF\"} />\n    //   </Text>\n    // </mesh>\n  )\n}\n\nfunction Diamond({ map, texture, matcap, layers, ...props }) {\n  const ref = useLayers(layers)\n\n  useFrame(() => {\n    if (ref.current) {\n      ref.current.rotation.y += 0.001\n      ref.current.rotation.z += 0.01\n    }\n  })\n\n  return (\n    <mesh ref={ref} {...props}>\n      <meshMatcapMaterial matcap={matcap} transparent opacity={0.9} color=\"#14CEFF\" />\n    </mesh>\n  )\n}\n\nfunction Diamonds({ layers, ...props }) {\n  const [matcapTexture] = useMatcapTexture('2E763A_78A0B7_B3D1CF_14F209')\n  const { nodes } = useGLTFLoader(process.env.PUBLIC_URL + '/diamond.glb')\n\n  return (\n    <group name=\"diamonds\" {...props}>\n      {diamondsData.mirrors.map((mirror, index) => (\n        <Diamond\n          key={`diamond-${index}`}\n          name={`diamond-${index}`}\n          {...mirror}\n          geometry={nodes.Cylinder.geometry}\n          matcap={matcapTexture}\n          scale={[0.5, 0.5, 0.5]}\n          layers={layers}\n        />\n      ))}\n    </group>\n  )\n}\n\nfunction Background({ layers, ...props }) {\n  const ref = useLayers(layers)\n  // const [matcapTexture] = useMatcapTexture('BA5DBA_F2BEF2_E69BE6_DC8CDC')\n  const [matcapTexture] = useMatcapTexture('BAADA8_ECE6E7_9A8378_E3DCD3')\n\n  return (\n    <Octahedron ref={ref} name=\"background\" args={[20, 4, 4]} {...props}>\n      <meshMatcapMaterial matcap={matcapTexture} side={THREE.BackSide} color=\"#FFFFFF\" />\n    </Octahedron>\n  )\n}\n\nconst clickMe = (hovered) => {\n  // document.history.href.back();\n  // window.history.back();\n  console.log(hovered)\n  // document.location.href = 'http://localhost:8000'\n}\n\n\nfunction Scene() {\n  const [cubeCamera, renderTarget] = useRenderTarget()\n  const thinFilmFresnelMap = useMemo(() => new ThinFilmFresnelMap(410, 0, 5, 1024), [])\n  const group = useSlerp()\n\n  // const ref = useRef()\n  const [hovered, hover] = useState(false)\n\n  const changeMap = (hovered) => {\n    ref.map = hovered ? null : thinFilmFresnelMap;\n  }\n\n  // useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n\n  return (\n    <>\n      <Background layers={[0, 11]} position={[0, 0, -5]} />\n      <cubeCamera\n        layers={[11]}\n        name=\"cubeCamera\"\n        ref={cubeCamera}\n        args={[0.1, 100, renderTarget]}\n        position={[0, 0, -12]}\n      />\n      <group name=\"sceneContainer\" ref={group}>\n        <Diamonds\n          onClick={() => clickMe(hovered)}\n          layers={[0, 11]} />\n        <group name=\"text\" position={[0, 0, -5]}\n        >\n          <Title\n            ref={ref}\n            onPointerOver={(event) => { hover(true); changeMap(hovered); }}\n            onPointerOut={(event) => { hover(false); changeMap(hovered); }}\n            // onClick={() => clickMe(hovered)} \n            layers={[0]} name=\"title\" texture={renderTarget.texture}\n            map={thinFilmFresnelMap} />\n        </group>\n      </group>\n    </>\n  )\n}\n\nexport default Scene\n"]},"metadata":{},"sourceType":"module"}