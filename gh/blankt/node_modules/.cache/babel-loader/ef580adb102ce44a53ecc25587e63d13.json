{"ast":null,"code":"/**\n * @classdesc\n * ThinFilmFresnelMap is a lookup texture containing the reflection colour. The texture index value\n * is dot(normal, view). The texture values are stored in approximated gamma space (power 2.0), so\n * the sampled value needs to be multiplied with itself before use. The sampled value should replace\n * the fresnel factor in a PBR material.\n *\n * @property filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @property refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @property refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n *\n * @constructor\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n * @param size The width of the texture. Defaults to 64.\n *\n * @extends DataTexture\n *\n * @author David Lenaerts <http://www.derschmale.com>\n */\nimport * as THREE from 'three';\nexport function ThinFilmFresnelMap(filmThickness, refractiveIndexFilm, refractiveIndexBase, size) {\n  this._filmThickness = filmThickness || 500.0;\n  this._refractiveIndexFilm = refractiveIndexFilm || 2;\n  this._refractiveIndexBase = refractiveIndexBase || 3;\n  this._size = size || 128;\n  this._data = new Uint8Array(this._size * 4);\n\n  this._updateData();\n\n  THREE.DataTexture.call(this, this._data, this._size, 1, THREE.RGBAFormat, THREE.UnsignedByteType, THREE.UVMapping, THREE.RepeatWrapping, THREE.RepeatWrapping, THREE.LinearFilter, THREE.LinearMipMapLinearFilter);\n  this.generateMipmaps = true;\n  this.needsUpdate = true;\n}\nThinFilmFresnelMap.prototype = Object.create(THREE.DataTexture.prototype, {\n  filmThickness: {\n    get: function get() {\n      return this._filmThickness;\n    },\n    set: function set(value) {\n      this._filmThickness = value;\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase);\n    }\n  },\n  refractiveIndexFilm: {\n    get: function get() {\n      return this._refractiveIndexFilm;\n    },\n    set: function set(value) {\n      this._refractiveIndexFilm = value;\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase);\n    }\n  },\n  refractiveIndexBase: {\n    get: function get() {\n      return this._refractiveIndexBase;\n    },\n    set: function set(value) {\n      this._refractiveIndexBase = value;\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase);\n    }\n  }\n});\n/**\n * Regenerates the lookup texture given new data.\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n */\n\nThinFilmFresnelMap.prototype.updateSettings = function (filmThickness, refractiveIndexFilm, refractiveIndexBase) {\n  this._filmThickness = filmThickness || 380;\n  this._refractiveIndexFilm = refractiveIndexFilm || 2;\n  this._refractiveIndexBase = refractiveIndexBase || 3;\n\n  this._updateData();\n};\n/**\n * @private\n */\n\n\nThinFilmFresnelMap.prototype._fresnelRefl = function (refractiveIndex1, refractiveIndex2, cos1, cos2, R, phi) {\n  // r is amplitudinal, R is power\n  var sin1Sqr = 1.0 - cos1 * cos1; // = sin^2(incident)\n\n  var refrRatio = refractiveIndex1 / refractiveIndex2;\n\n  if (refrRatio * refrRatio * sin1Sqr > 1.0) {\n    // total internal reflection\n    R.x = 1.0;\n    R.y = 1.0;\n    var sqrRefrRatio = refrRatio * refrRatio; // it looks like glsl's atan ranges are different from those in JS?\n\n    phi.x = 2.0 * Math.atan(-sqrRefrRatio * Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1);\n    phi.y = 2.0 * Math.atan(-Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1);\n  } else {\n    var r_p = (refractiveIndex2 * cos1 - refractiveIndex1 * cos2) / (refractiveIndex2 * cos1 + refractiveIndex1 * cos2);\n    var r_s = (refractiveIndex1 * cos1 - refractiveIndex2 * cos2) / (refractiveIndex1 * cos1 + refractiveIndex2 * cos2);\n    phi.x = r_p < 0.0 ? Math.PI : 0.0;\n    phi.y = r_s < 0.0 ? Math.PI : 0.0;\n    R.x = r_p * r_p;\n    R.y = r_s * r_s;\n  }\n};\n/**\n * @private\n */\n\n\nThinFilmFresnelMap.prototype._updateData = function () {\n  var filmThickness = this._filmThickness;\n  var refractiveIndexFilm = this._refractiveIndexFilm;\n  var refractiveIndexBase = this._refractiveIndexBase;\n  var size = this._size; // approximate CIE XYZ weighting functions from: http://jcgt.org/published/0002/02/01/paper.pdf\n\n  function xFit_1931(lambda) {\n    var t1 = (lambda - 442.0) * (lambda < 442.0 ? 0.0624 : 0.0374);\n    var t2 = (lambda - 599.8) * (lambda < 599.8 ? 0.0264 : 0.0323);\n    var t3 = (lambda - 501.1) * (lambda < 501.1 ? 0.049 : 0.0382);\n    return 0.362 * Math.exp(-0.5 * t1 * t1) + 1.056 * Math.exp(-0.5 * t2 * t2) - 0.065 * Math.exp(-0.5 * t3 * t3);\n  }\n\n  function yFit_1931(lambda) {\n    var t1 = (lambda - 568.8) * (lambda < 568.8 ? 0.0213 : 0.0247);\n    var t2 = (lambda - 530.9) * (lambda < 530.9 ? 0.0613 : 0.0322);\n    return 0.821 * Math.exp(-0.5 * t1 * t1) + 0.286 * Math.exp(-0.5 * t2 * t2);\n  }\n\n  function zFit_1931(lambda) {\n    var t1 = (lambda - 437.0) * (lambda < 437.0 ? 0.0845 : 0.0278);\n    var t2 = (lambda - 459.0) * (lambda < 459.0 ? 0.0385 : 0.0725);\n    return 1.217 * Math.exp(-0.5 * t1 * t1) + 0.681 * Math.exp(-0.5 * t2 * t2);\n  }\n\n  var data = this._data;\n  var phi12 = new THREE.Vector2();\n  var phi21 = new THREE.Vector2();\n  var phi23 = new THREE.Vector2();\n  var R12 = new THREE.Vector2();\n  var T12 = new THREE.Vector2();\n  var R23 = new THREE.Vector2();\n  var R_bi = new THREE.Vector2();\n  var T_tot = new THREE.Vector2();\n  var R_star = new THREE.Vector2();\n  var R_bi_sqr = new THREE.Vector2();\n  var R_12_star = new THREE.Vector2();\n  var R_star_t_tot = new THREE.Vector2();\n  var refrRatioSqr = 1.0 / (refractiveIndexFilm * refractiveIndexFilm);\n  var refrRatioSqrBase = refractiveIndexFilm * refractiveIndexFilm / (refractiveIndexBase * refractiveIndexBase); // RGB is too limiting, so we use the entire spectral domain, but using limited samples (64) to\n  // create more pleasing bands\n\n  var numBands = 64;\n  var waveLenRange = 780 - 380; // the entire visible range\n\n  for (var i = 0; i < size; ++i) {\n    var cosThetaI = i / size;\n    var cosThetaT = Math.sqrt(1 - refrRatioSqr * (1.0 - cosThetaI * cosThetaI));\n    var cosThetaT2 = Math.sqrt(1 - refrRatioSqrBase * (1.0 - cosThetaT * cosThetaT)); // this is essentially the extra distance traveled by a ray if it bounds through the film\n\n    var pathDiff = 2.0 * refractiveIndexFilm * filmThickness * cosThetaT;\n    var pathDiff2PI = 2.0 * Math.PI * pathDiff;\n\n    this._fresnelRefl(1.0, refractiveIndexFilm, cosThetaI, cosThetaT, R12, phi12);\n\n    T12.x = 1.0 - R12.x;\n    T12.y = 1.0 - R12.y;\n    phi21.x = Math.PI - phi12.x;\n    phi21.y = Math.PI - phi12.y; // this concerns the base layer\n\n    this._fresnelRefl(refractiveIndexFilm, refractiveIndexBase, cosThetaT, cosThetaT2, R23, phi23);\n\n    R_bi.x = Math.sqrt(R23.x * R12.x);\n    R_bi.y = Math.sqrt(R23.y * R12.y);\n    T_tot.x = Math.sqrt(T12.x * T12.x);\n    T_tot.y = Math.sqrt(T12.y * T12.y);\n    R_star.x = T12.x * T12.x * R23.x / (1.0 - R23.x * R12.x);\n    R_star.y = T12.y * T12.y * R23.y / (1.0 - R23.y * R12.y);\n    R_bi_sqr.x = R_bi.x * R_bi.x;\n    R_bi_sqr.y = R_bi.y * R_bi.y;\n    R_12_star.x = R12.x + R_star.x;\n    R_12_star.y = R12.y + R_star.y;\n    R_star_t_tot.x = R_star.x - T_tot.x;\n    R_star_t_tot.y = R_star.y - T_tot.y;\n    var x = 0,\n        y = 0,\n        z = 0;\n    var totX = 0,\n        totY = 0,\n        totZ = 0; // TODO: we could also put the thickness in the look-up table, make it a 2D table\n\n    for (var j = 0; j < numBands; ++j) {\n      var waveLen = 380 + j / (numBands - 1) * waveLenRange;\n      var deltaPhase = pathDiff2PI / waveLen;\n      var cosPhiX = Math.cos(deltaPhase + phi23.x + phi21.x);\n      var cosPhiY = Math.cos(deltaPhase + phi23.y + phi21.y);\n      var valX = R_12_star.x + 2.0 * (R_bi.x * cosPhiX - R_bi_sqr.x) / (1.0 - 2 * R_bi.x * cosPhiX + R_bi_sqr.x) * R_star_t_tot.x;\n      var valY = R_12_star.y + 2.0 * (R_bi.y * cosPhiY - R_bi_sqr.y) / (1.0 - 2 * R_bi.y * cosPhiY + R_bi_sqr.y) * R_star_t_tot.y;\n      var v = 0.5 * (valX + valY);\n      var wx = xFit_1931(waveLen);\n      var wy = yFit_1931(waveLen);\n      var wz = zFit_1931(waveLen);\n      totX += wx;\n      totY += wy;\n      totZ += wz;\n      x += wx * v;\n      y += wy * v;\n      z += wz * v;\n    }\n\n    x /= totX;\n    y /= totY;\n    z /= totZ;\n    var r = 3.2406 * x - 1.5372 * y - 0.4986 * z;\n    var g = -0.9689 * x + 1.8758 * y + 0.0415 * z;\n    var b = 0.0557 * x - 0.204 * y + 1.057 * z;\n    r = THREE.Math.clamp(r, 0.0, 1.0);\n    g = THREE.Math.clamp(g, 0.0, 1.0);\n    b = THREE.Math.clamp(b, 0.0, 1.0); // linear to gamma\n\n    r = Math.sqrt(r);\n    g = Math.sqrt(g);\n    b = Math.sqrt(b); // CIE XYZ to linear rgb conversion matrix:\n    // 3.2406 -1.5372 -0.4986\n    // -0.9689  1.8758  0.0415\n    // 0.0557 -0.2040  1.0570\n\n    var k = i << 2;\n    data[k] = Math.floor(r * 0xff);\n    data[k + 1] = Math.floor(g * 0xff);\n    data[k + 2] = Math.floor(b * 0xff);\n    data[k + 3] = 0xff;\n  }\n\n  this.needsUpdate = true;\n};","map":{"version":3,"sources":["/Users/stoone_j/3rd/maze/blank/src/start/ThinFilmFresnelMap.js"],"names":["THREE","ThinFilmFresnelMap","filmThickness","refractiveIndexFilm","refractiveIndexBase","size","_filmThickness","_refractiveIndexFilm","_refractiveIndexBase","_size","_data","Uint8Array","_updateData","DataTexture","call","RGBAFormat","UnsignedByteType","UVMapping","RepeatWrapping","LinearFilter","LinearMipMapLinearFilter","generateMipmaps","needsUpdate","prototype","Object","create","get","set","value","updateSettings","_fresnelRefl","refractiveIndex1","refractiveIndex2","cos1","cos2","R","phi","sin1Sqr","refrRatio","x","y","sqrRefrRatio","Math","atan","sqrt","r_p","r_s","PI","xFit_1931","lambda","t1","t2","t3","exp","yFit_1931","zFit_1931","data","phi12","Vector2","phi21","phi23","R12","T12","R23","R_bi","T_tot","R_star","R_bi_sqr","R_12_star","R_star_t_tot","refrRatioSqr","refrRatioSqrBase","numBands","waveLenRange","i","cosThetaI","cosThetaT","cosThetaT2","pathDiff","pathDiff2PI","z","totX","totY","totZ","j","waveLen","deltaPhase","cosPhiX","cos","cosPhiY","valX","valY","v","wx","wy","wz","r","g","b","clamp","k","floor"],"mappings":"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","sourcesContent":["/**\n * @classdesc\n * ThinFilmFresnelMap is a lookup texture containing the reflection colour. The texture index value\n * is dot(normal, view). The texture values are stored in approximated gamma space (power 2.0), so\n * the sampled value needs to be multiplied with itself before use. The sampled value should replace\n * the fresnel factor in a PBR material.\n *\n * @property filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @property refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @property refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n *\n * @constructor\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n * @param size The width of the texture. Defaults to 64.\n *\n * @extends DataTexture\n *\n * @author David Lenaerts <http://www.derschmale.com>\n */\nimport * as THREE from 'three'\n\nexport function ThinFilmFresnelMap(filmThickness, refractiveIndexFilm, refractiveIndexBase, size) {\n  this._filmThickness = filmThickness || 500.0\n  this._refractiveIndexFilm = refractiveIndexFilm || 2\n  this._refractiveIndexBase = refractiveIndexBase || 3\n  this._size = size || 128\n  this._data = new Uint8Array(this._size * 4)\n\n  this._updateData()\n\n  THREE.DataTexture.call(\n    this,\n    this._data,\n    this._size,\n    1,\n    THREE.RGBAFormat,\n    THREE.UnsignedByteType,\n    THREE.UVMapping,\n    THREE.RepeatWrapping,\n    THREE.RepeatWrapping,\n    THREE.LinearFilter,\n    THREE.LinearMipMapLinearFilter\n  )\n  this.generateMipmaps = true\n  this.needsUpdate = true\n}\n\nThinFilmFresnelMap.prototype = Object.create(THREE.DataTexture.prototype, {\n  filmThickness: {\n    get: function () {\n      return this._filmThickness\n    },\n    set: function (value) {\n      this._filmThickness = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  },\n  refractiveIndexFilm: {\n    get: function () {\n      return this._refractiveIndexFilm\n    },\n    set: function (value) {\n      this._refractiveIndexFilm = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  },\n  refractiveIndexBase: {\n    get: function () {\n      return this._refractiveIndexBase\n    },\n    set: function (value) {\n      this._refractiveIndexBase = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  }\n})\n\n/**\n * Regenerates the lookup texture given new data.\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n */\nThinFilmFresnelMap.prototype.updateSettings = function (filmThickness, refractiveIndexFilm, refractiveIndexBase) {\n  this._filmThickness = filmThickness || 380\n  this._refractiveIndexFilm = refractiveIndexFilm || 2\n  this._refractiveIndexBase = refractiveIndexBase || 3\n  this._updateData()\n}\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._fresnelRefl = function (refractiveIndex1, refractiveIndex2, cos1, cos2, R, phi) {\n  // r is amplitudinal, R is power\n  var sin1Sqr = 1.0 - cos1 * cos1 // = sin^2(incident)\n  var refrRatio = refractiveIndex1 / refractiveIndex2\n\n  if (refrRatio * refrRatio * sin1Sqr > 1.0) {\n    // total internal reflection\n    R.x = 1.0\n    R.y = 1.0\n\n    var sqrRefrRatio = refrRatio * refrRatio\n    // it looks like glsl's atan ranges are different from those in JS?\n    phi.x = 2.0 * Math.atan((-sqrRefrRatio * Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio)) / cos1)\n    phi.y = 2.0 * Math.atan(-Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1)\n  } else {\n    var r_p = (refractiveIndex2 * cos1 - refractiveIndex1 * cos2) / (refractiveIndex2 * cos1 + refractiveIndex1 * cos2)\n    var r_s = (refractiveIndex1 * cos1 - refractiveIndex2 * cos2) / (refractiveIndex1 * cos1 + refractiveIndex2 * cos2)\n\n    phi.x = r_p < 0.0 ? Math.PI : 0.0\n    phi.y = r_s < 0.0 ? Math.PI : 0.0\n\n    R.x = r_p * r_p\n    R.y = r_s * r_s\n  }\n}\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._updateData = function () {\n  var filmThickness = this._filmThickness\n  var refractiveIndexFilm = this._refractiveIndexFilm\n  var refractiveIndexBase = this._refractiveIndexBase\n  var size = this._size\n\n  // approximate CIE XYZ weighting functions from: http://jcgt.org/published/0002/02/01/paper.pdf\n  function xFit_1931(lambda) {\n    var t1 = (lambda - 442.0) * (lambda < 442.0 ? 0.0624 : 0.0374)\n    var t2 = (lambda - 599.8) * (lambda < 599.8 ? 0.0264 : 0.0323)\n    var t3 = (lambda - 501.1) * (lambda < 501.1 ? 0.049 : 0.0382)\n    return 0.362 * Math.exp(-0.5 * t1 * t1) + 1.056 * Math.exp(-0.5 * t2 * t2) - 0.065 * Math.exp(-0.5 * t3 * t3)\n  }\n\n  function yFit_1931(lambda) {\n    var t1 = (lambda - 568.8) * (lambda < 568.8 ? 0.0213 : 0.0247)\n    var t2 = (lambda - 530.9) * (lambda < 530.9 ? 0.0613 : 0.0322)\n    return 0.821 * Math.exp(-0.5 * t1 * t1) + 0.286 * Math.exp(-0.5 * t2 * t2)\n  }\n\n  function zFit_1931(lambda) {\n    var t1 = (lambda - 437.0) * (lambda < 437.0 ? 0.0845 : 0.0278)\n    var t2 = (lambda - 459.0) * (lambda < 459.0 ? 0.0385 : 0.0725)\n    return 1.217 * Math.exp(-0.5 * t1 * t1) + 0.681 * Math.exp(-0.5 * t2 * t2)\n  }\n\n  var data = this._data\n  var phi12 = new THREE.Vector2()\n  var phi21 = new THREE.Vector2()\n  var phi23 = new THREE.Vector2()\n  var R12 = new THREE.Vector2()\n  var T12 = new THREE.Vector2()\n  var R23 = new THREE.Vector2()\n  var R_bi = new THREE.Vector2()\n  var T_tot = new THREE.Vector2()\n  var R_star = new THREE.Vector2()\n  var R_bi_sqr = new THREE.Vector2()\n  var R_12_star = new THREE.Vector2()\n  var R_star_t_tot = new THREE.Vector2()\n\n  var refrRatioSqr = 1.0 / (refractiveIndexFilm * refractiveIndexFilm)\n  var refrRatioSqrBase = (refractiveIndexFilm * refractiveIndexFilm) / (refractiveIndexBase * refractiveIndexBase)\n\n  // RGB is too limiting, so we use the entire spectral domain, but using limited samples (64) to\n  // create more pleasing bands\n  var numBands = 64\n  var waveLenRange = 780 - 380 // the entire visible range\n\n  for (var i = 0; i < size; ++i) {\n    var cosThetaI = i / size\n    var cosThetaT = Math.sqrt(1 - refrRatioSqr * (1.0 - cosThetaI * cosThetaI))\n    var cosThetaT2 = Math.sqrt(1 - refrRatioSqrBase * (1.0 - cosThetaT * cosThetaT))\n\n    // this is essentially the extra distance traveled by a ray if it bounds through the film\n    var pathDiff = 2.0 * refractiveIndexFilm * filmThickness * cosThetaT\n    var pathDiff2PI = 2.0 * Math.PI * pathDiff\n\n    this._fresnelRefl(1.0, refractiveIndexFilm, cosThetaI, cosThetaT, R12, phi12)\n    T12.x = 1.0 - R12.x\n    T12.y = 1.0 - R12.y\n    phi21.x = Math.PI - phi12.x\n    phi21.y = Math.PI - phi12.y\n\n    // this concerns the base layer\n    this._fresnelRefl(refractiveIndexFilm, refractiveIndexBase, cosThetaT, cosThetaT2, R23, phi23)\n    R_bi.x = Math.sqrt(R23.x * R12.x)\n    R_bi.y = Math.sqrt(R23.y * R12.y)\n    T_tot.x = Math.sqrt(T12.x * T12.x)\n    T_tot.y = Math.sqrt(T12.y * T12.y)\n    R_star.x = (T12.x * T12.x * R23.x) / (1.0 - R23.x * R12.x)\n    R_star.y = (T12.y * T12.y * R23.y) / (1.0 - R23.y * R12.y)\n    R_bi_sqr.x = R_bi.x * R_bi.x\n    R_bi_sqr.y = R_bi.y * R_bi.y\n    R_12_star.x = R12.x + R_star.x\n    R_12_star.y = R12.y + R_star.y\n    R_star_t_tot.x = R_star.x - T_tot.x\n    R_star_t_tot.y = R_star.y - T_tot.y\n    var x = 0,\n      y = 0,\n      z = 0\n    var totX = 0,\n      totY = 0,\n      totZ = 0\n\n    // TODO: we could also put the thickness in the look-up table, make it a 2D table\n    for (var j = 0; j < numBands; ++j) {\n      var waveLen = 380 + (j / (numBands - 1)) * waveLenRange\n      var deltaPhase = pathDiff2PI / waveLen\n\n      var cosPhiX = Math.cos(deltaPhase + phi23.x + phi21.x)\n      var cosPhiY = Math.cos(deltaPhase + phi23.y + phi21.y)\n      var valX =\n        R_12_star.x +\n        ((2.0 * (R_bi.x * cosPhiX - R_bi_sqr.x)) / (1.0 - 2 * R_bi.x * cosPhiX + R_bi_sqr.x)) * R_star_t_tot.x\n      var valY =\n        R_12_star.y +\n        ((2.0 * (R_bi.y * cosPhiY - R_bi_sqr.y)) / (1.0 - 2 * R_bi.y * cosPhiY + R_bi_sqr.y)) * R_star_t_tot.y\n      var v = 0.5 * (valX + valY)\n\n      var wx = xFit_1931(waveLen)\n      var wy = yFit_1931(waveLen)\n      var wz = zFit_1931(waveLen)\n\n      totX += wx\n      totY += wy\n      totZ += wz\n\n      x += wx * v\n      y += wy * v\n      z += wz * v\n    }\n\n    x /= totX\n    y /= totY\n    z /= totZ\n\n    var r = 3.2406 * x - 1.5372 * y - 0.4986 * z\n    var g = -0.9689 * x + 1.8758 * y + 0.0415 * z\n    var b = 0.0557 * x - 0.204 * y + 1.057 * z\n\n    r = THREE.Math.clamp(r, 0.0, 1.0)\n    g = THREE.Math.clamp(g, 0.0, 1.0)\n    b = THREE.Math.clamp(b, 0.0, 1.0)\n\n    // linear to gamma\n    r = Math.sqrt(r)\n    g = Math.sqrt(g)\n    b = Math.sqrt(b)\n\n    // CIE XYZ to linear rgb conversion matrix:\n    // 3.2406 -1.5372 -0.4986\n    // -0.9689  1.8758  0.0415\n    // 0.0557 -0.2040  1.0570\n\n    var k = i << 2\n    data[k] = Math.floor(r * 0xff)\n    data[k + 1] = Math.floor(g * 0xff)\n    data[k + 2] = Math.floor(b * 0xff)\n    data[k + 3] = 0xff\n  }\n\n  this.needsUpdate = true\n}\n"]},"metadata":{},"sourceType":"module"}