{"ast":null,"code":"import _slicedToArray from \"/Users/stoone_j/3rd/maze/blank/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/stoone_j/3rd/maze/blank/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/stoone_j/3rd/maze/blank/src/start/Scene2.js\";\nimport React, { useMemo, useState, useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { useFrame } from 'react-three-fiber';\nimport { Text, useMatcapTexture, Octahedron, useGLTFLoader } from '@react-three/drei';\nimport useSlerp from './use-slerp';\nimport useRenderTarget from './use-render-target';\nimport { ThinFilmFresnelMap } from './ThinFilmFresnelMap';\nimport { mirrorsData as diamondsData } from './data';\nimport useLayers from './use-layers';\nvar TEXT_PROPS = {\n  fontSize: 5,\n  font: 'https://fonts.gstatic.com/s/monoton/v10/5h1aiZUrOngCibe4TkHLRA.woff'\n};\n\nfunction Title(_ref) {\n  var material = _ref.material,\n      texture = _ref.texture,\n      map = _ref.map,\n      layers = _ref.layers,\n      props = _objectWithoutProperties(_ref, [\"material\", \"texture\", \"map\", \"layers\"]);\n\n  var group = useRef();\n  useEffect(function () {\n    group.current.lookAt(0, 0, 0);\n  }, []);\n  var textRef = useLayers(layers); // const [hovered, hover] = useState(false)\n\n  return /*#__PURE__*/React.createElement(\"group\", Object.assign({}, props, {\n    ref: group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Text // onPointerOver={(event) => { hover(true); console.log(hovered) }}\n  // onPointerOut={(event) => { hover(false); console.log(hovered) }}\n  , Object.assign({\n    ref: textRef,\n    name: \"text-olga\",\n    depthTest: false,\n    position: [0, -1, 0]\n  }, TEXT_PROPS, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), \"HELLO\", /*#__PURE__*/React.createElement(\"meshPhysicalMaterial\", {\n    envMap: texture,\n    map: map,\n    roughness: 0,\n    metalness: 1,\n    color: \"#FFFFFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction Diamond(_ref2) {\n  var map = _ref2.map,\n      texture = _ref2.texture,\n      matcap = _ref2.matcap,\n      layers = _ref2.layers,\n      props = _objectWithoutProperties(_ref2, [\"map\", \"texture\", \"matcap\", \"layers\"]);\n\n  var ref = useLayers(layers);\n  useFrame(function () {\n    if (ref.current) {\n      ref.current.rotation.y += 0.001;\n      ref.current.rotation.z += 0.01;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({\n    ref: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"meshMatcapMaterial\", {\n    matcap: matcap,\n    transparent: true,\n    opacity: 0.9,\n    color: \"#14CEFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Diamonds(_ref3) {\n  var _this = this;\n\n  var layers = _ref3.layers,\n      props = _objectWithoutProperties(_ref3, [\"layers\"]);\n\n  var _useMatcapTexture = useMatcapTexture('2E763A_78A0B7_B3D1CF_14F209'),\n      _useMatcapTexture2 = _slicedToArray(_useMatcapTexture, 1),\n      matcapTexture = _useMatcapTexture2[0];\n\n  var _useGLTFLoader = useGLTFLoader(process.env.PUBLIC_URL + '/diamond.glb'),\n      nodes = _useGLTFLoader.nodes;\n\n  return /*#__PURE__*/React.createElement(\"group\", Object.assign({\n    name: \"diamonds\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }), diamondsData.mirrors.map(function (mirror, index) {\n    return /*#__PURE__*/React.createElement(Diamond, Object.assign({\n      key: \"diamond-\".concat(index),\n      name: \"diamond-\".concat(index)\n    }, mirror, {\n      geometry: nodes.Cylinder.geometry,\n      matcap: matcapTexture,\n      scale: [0.5, 0.5, 0.5],\n      layers: layers,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }));\n  }));\n}\n\nfunction Background(_ref4) {\n  var layers = _ref4.layers,\n      props = _objectWithoutProperties(_ref4, [\"layers\"]);\n\n  var ref = useLayers(layers); // const [matcapTexture] = useMatcapTexture('BA5DBA_F2BEF2_E69BE6_DC8CDC')\n\n  var _useMatcapTexture3 = useMatcapTexture('BAADA8_ECE6E7_9A8378_E3DCD3'),\n      _useMatcapTexture4 = _slicedToArray(_useMatcapTexture3, 1),\n      matcapTexture = _useMatcapTexture4[0];\n\n  return /*#__PURE__*/React.createElement(Octahedron, Object.assign({\n    ref: ref,\n    name: \"background\",\n    args: [20, 4, 4]\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"meshMatcapMaterial\", {\n    matcap: matcapTexture,\n    side: THREE.BackSide,\n    color: \"#FFFFFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar clickMe = function clickMe() {\n  // document.history.href.back();\n  window.history.back(); // console.log(hovered)\n  // document.location.href = 'http://localhost:8000'\n};\n\nfunction Scene() {\n  var _useRenderTarget = useRenderTarget(),\n      _useRenderTarget2 = _slicedToArray(_useRenderTarget, 2),\n      cubeCamera = _useRenderTarget2[0],\n      renderTarget = _useRenderTarget2[1];\n\n  var thinFilmFresnelMap = useMemo(function () {\n    return new ThinFilmFresnelMap(410, 0, 5, 1024);\n  }, []);\n  var group = useSlerp(); // const ref = useRef()\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1]; // this.state.hovered = false\n  // useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n\n\n  return state ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Background, {\n    layers: [0, 11],\n    position: [0, 0, -5],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    layers: [11],\n    name: \"cubeCamera\",\n    ref: cubeCamera,\n    args: [0.1, 100, renderTarget],\n    position: [0, 0, -12],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    name: \"sceneContainer\",\n    ref: group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    name: \"text\",\n    position: [0, 0, -5],\n    onPointerOver: function onPointerOver(event) {\n      setState(true);\n      console.log(state);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Title // ref={ref}\n  // onPointerOut={(event) => { setState(false); console.log(state) }}\n  // onPointerOver={(event) => { hover(true); console.log(hovered) }}\n  // onPointerOut={(event) => { hover(false); console.log(hovered) }}\n  , {\n    onClick: function onClick() {\n      return clickMe();\n    },\n    layers: [0],\n    name: \"title\",\n    texture: renderTarget.texture,\n    map: thinFilmFresnelMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Background, {\n    layers: [0, 11],\n    position: [0, 0, -5],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    layers: [11],\n    name: \"cubeCamera\",\n    ref: cubeCamera,\n    args: [0.1, 100, renderTarget],\n    position: [0, 0, -12],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    name: \"sceneContainer\",\n    ref: group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Diamonds, {\n    layers: [0, 11],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    name: \"text\",\n    position: [0, 0, -5],\n    onPointerOver: function onPointerOver(event) {\n      setState(true);\n      console.log(state);\n    },\n    onPointerOut: function onPointerOut(event) {\n      setState(false);\n      console.log(state);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Title // ref={ref}\n  // onPointerOver={(event) => { hover(true); console.log(hovered) }}\n  // onPointerOut={(event) => { hover(false); console.log(hovered) }}\n  , {\n    onClick: function onClick() {\n      return clickMe();\n    },\n    layers: [0],\n    name: \"title\",\n    texture: renderTarget.texture,\n    map: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/stoone_j/3rd/maze/blank/src/start/Scene2.js"],"names":["React","useMemo","useState","useRef","useEffect","THREE","useFrame","Text","useMatcapTexture","Octahedron","useGLTFLoader","useSlerp","useRenderTarget","ThinFilmFresnelMap","mirrorsData","diamondsData","useLayers","TEXT_PROPS","fontSize","font","Title","material","texture","map","layers","props","group","current","lookAt","textRef","Diamond","matcap","ref","rotation","y","z","Diamonds","matcapTexture","process","env","PUBLIC_URL","nodes","mirrors","mirror","index","Cylinder","geometry","Background","BackSide","clickMe","window","history","back","Scene","cubeCamera","renderTarget","thinFilmFresnelMap","state","setState","event","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,SAA3C,QAA4D,OAA5D;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,IAAT,EAAeC,gBAAf,EAAiCC,UAAjC,EAA6CC,aAA7C,QAAkE,mBAAlE;AAEA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,WAAW,IAAIC,YAAxB,QAA4C,QAA5C;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,QAAQ,EAAE,CADO;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAAnB;;AAKA,SAASC,KAAT,OAA6D;AAAA,MAA5CC,QAA4C,QAA5CA,QAA4C;AAAA,MAAlCC,OAAkC,QAAlCA,OAAkC;AAAA,MAAzBC,GAAyB,QAAzBA,GAAyB;AAAA,MAApBC,MAAoB,QAApBA,MAAoB;AAAA,MAATC,KAAS;;AAC3D,MAAMC,KAAK,GAAGvB,MAAM,EAApB;AACAC,EAAAA,SAAS,CAAC,YAAM;AACdsB,IAAAA,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAMC,OAAO,GAAGb,SAAS,CAACQ,MAAD,CAAzB,CAN2D,CAQ3D;;AAEA,sBACE,+CAAWC,KAAX;AAAkB,IAAA,GAAG,EAAEC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEE,oBAAC,IAAD,CACE;AACA;AAFF;AAGE,IAAA,GAAG,EAAEG,OAHP;AAGgB,IAAA,IAAI,EAAC,WAHrB;AAGiC,IAAA,SAAS,EAAE,KAH5C;AAGmD,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR;AAH7D,KAG6EZ,UAH7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAKE;AAAsB,IAAA,MAAM,EAAEK,OAA9B;AAAuC,IAAA,GAAG,EAAEC,GAA5C;AAAiD,IAAA,SAAS,EAAE,CAA5D;AAA+D,IAAA,SAAS,EAAE,CAA1E;AAA6E,IAAA,KAAK,EAAC,SAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAFF,CADF;AAYD;;AAED,SAASO,OAAT,QAA6D;AAAA,MAA1CP,GAA0C,SAA1CA,GAA0C;AAAA,MAArCD,OAAqC,SAArCA,OAAqC;AAAA,MAA5BS,MAA4B,SAA5BA,MAA4B;AAAA,MAApBP,MAAoB,SAApBA,MAAoB;AAAA,MAATC,KAAS;;AAC3D,MAAMO,GAAG,GAAGhB,SAAS,CAACQ,MAAD,CAArB;AAEAlB,EAAAA,QAAQ,CAAC,YAAM;AACb,QAAI0B,GAAG,CAACL,OAAR,EAAiB;AACfK,MAAAA,GAAG,CAACL,OAAJ,CAAYM,QAAZ,CAAqBC,CAArB,IAA0B,KAA1B;AACAF,MAAAA,GAAG,CAACL,OAAJ,CAAYM,QAAZ,CAAqBE,CAArB,IAA0B,IAA1B;AACD;AACF,GALO,CAAR;AAOA,sBACE;AAAM,IAAA,GAAG,EAAEH;AAAX,KAAoBP,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AAAoB,IAAA,MAAM,EAAEM,MAA5B;AAAoC,IAAA,WAAW,MAA/C;AAAgD,IAAA,OAAO,EAAE,GAAzD;AAA8D,IAAA,KAAK,EAAC,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,SAASK,QAAT,QAAwC;AAAA;;AAAA,MAApBZ,MAAoB,SAApBA,MAAoB;AAAA,MAATC,KAAS;;AAAA,0BACdjB,gBAAgB,CAAC,6BAAD,CADF;AAAA;AAAA,MAC/B6B,aAD+B;;AAAA,uBAEpB3B,aAAa,CAAC4B,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyB,cAA1B,CAFO;AAAA,MAE9BC,KAF8B,kBAE9BA,KAF8B;;AAItC,sBACE;AAAO,IAAA,IAAI,EAAC;AAAZ,KAA2BhB,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGV,YAAY,CAAC2B,OAAb,CAAqBnB,GAArB,CAAyB,UAACoB,MAAD,EAASC,KAAT;AAAA,wBACxB,oBAAC,OAAD;AACE,MAAA,GAAG,oBAAaA,KAAb,CADL;AAEE,MAAA,IAAI,oBAAaA,KAAb;AAFN,OAGMD,MAHN;AAIE,MAAA,QAAQ,EAAEF,KAAK,CAACI,QAAN,CAAeC,QAJ3B;AAKE,MAAA,MAAM,EAAET,aALV;AAME,MAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CANT;AAOE,MAAA,MAAM,EAAEb,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADwB;AAAA,GAAzB,CADH,CADF;AAeD;;AAED,SAASuB,UAAT,QAA0C;AAAA,MAApBvB,MAAoB,SAApBA,MAAoB;AAAA,MAATC,KAAS;;AACxC,MAAMO,GAAG,GAAGhB,SAAS,CAACQ,MAAD,CAArB,CADwC,CAExC;;AAFwC,2BAGhBhB,gBAAgB,CAAC,6BAAD,CAHA;AAAA;AAAA,MAGjC6B,aAHiC;;AAKxC,sBACE,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAEL,GAAjB;AAAsB,IAAA,IAAI,EAAC,YAA3B;AAAwC,IAAA,IAAI,EAAE,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR;AAA9C,KAA8DP,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AAAoB,IAAA,MAAM,EAAEY,aAA5B;AAA2C,IAAA,IAAI,EAAEhC,KAAK,CAAC2C,QAAvD;AAAiE,IAAA,KAAK,EAAC,SAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAeC,IAAf,GAFoB,CAGpB;AACA;AACD,CALD;;AAQA,SAASC,KAAT,GAAiB;AAAA,yBACoBzC,eAAe,EADnC;AAAA;AAAA,MACR0C,UADQ;AAAA,MACIC,YADJ;;AAEf,MAAMC,kBAAkB,GAAGvD,OAAO,CAAC;AAAA,WAAM,IAAIY,kBAAJ,CAAuB,GAAvB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,IAAlC,CAAN;AAAA,GAAD,EAAgD,EAAhD,CAAlC;AACA,MAAMa,KAAK,GAAGf,QAAQ,EAAtB,CAHe,CAKf;;AALe,kBAMWT,QAAQ,CAAC,KAAD,CANnB;AAAA;AAAA,MAMRuD,KANQ;AAAA,MAMDC,QANC,kBAOf;AAEA;;;AAEA,SACED,KAAK,gBACD,uDACA,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAApB;AAA6B,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA;AACE,IAAA,MAAM,EAAE,CAAC,EAAD,CADV;AAEE,IAAA,IAAI,EAAC,YAFP;AAGE,IAAA,GAAG,EAAEH,UAHP;AAIE,IAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAWC,YAAX,CAJR;AAKE,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,EAAR,CALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,eASA;AAAO,IAAA,IAAI,EAAC,gBAAZ;AAA6B,IAAA,GAAG,EAAE7B,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAA7B;AACE,IAAA,aAAa,EAAE,uBAACiC,KAAD,EAAW;AAAED,MAAAA,QAAQ,CAAC,IAAD,CAAR;AAAgBE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAAoB,KADlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE,oBAAC,KAAD,CACE;AACA;AACA;AACA;AAJF;AAKE,IAAA,OAAO,EAAE;AAAA,aAAMR,OAAO,EAAb;AAAA,KALX;AAME,IAAA,MAAM,EAAE,CAAC,CAAD,CANV;AAMe,IAAA,IAAI,EAAC,OANpB;AAM4B,IAAA,OAAO,EAAEM,YAAY,CAACjC,OANlD;AAOE,IAAA,GAAG,EAAEkC,kBAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFF,CATA,CADC,gBA0BD,uDACA,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAApB;AAA6B,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA;AACE,IAAA,MAAM,EAAE,CAAC,EAAD,CADV;AAEE,IAAA,IAAI,EAAC,YAFP;AAGE,IAAA,GAAG,EAAEF,UAHP;AAIE,IAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAWC,YAAX,CAJR;AAKE,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,EAAR,CALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,eASA;AAAO,IAAA,IAAI,EAAC,gBAAZ;AAA6B,IAAA,GAAG,EAAE7B,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAA7B;AACE,IAAA,aAAa,EAAE,uBAACiC,KAAD,EAAW;AAAED,MAAAA,QAAQ,CAAC,IAAD,CAAR;AAAgBE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAAoB,KADlE;AAEE,IAAA,YAAY,EAAE,sBAACE,KAAD,EAAW;AAAED,MAAAA,QAAQ,CAAC,KAAD,CAAR;AAAiBE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAAoB,KAFlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,KAAD,CACE;AACA;AACA;AAHF;AAIE,IAAA,OAAO,EAAE;AAAA,aAAMR,OAAO,EAAb;AAAA,KAJX;AAKE,IAAA,MAAM,EAAE,CAAC,CAAD,CALV;AAKe,IAAA,IAAI,EAAC,OALpB;AAK4B,IAAA,OAAO,EAAEM,YAAY,CAACjC,OALlD;AAME,IAAA,GAAG,EAAE,IANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAFF,CATA,CA3BN;AAqDD;;AAED,eAAe+B,KAAf","sourcesContent":["import React, { useMemo, useState, useRef, useEffect } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport { Text, useMatcapTexture, Octahedron, useGLTFLoader } from '@react-three/drei'\n\nimport useSlerp from './use-slerp'\nimport useRenderTarget from './use-render-target'\nimport { ThinFilmFresnelMap } from './ThinFilmFresnelMap'\nimport { mirrorsData as diamondsData } from './data'\nimport useLayers from './use-layers'\n\nconst TEXT_PROPS = {\n  fontSize: 5,\n  font: 'https://fonts.gstatic.com/s/monoton/v10/5h1aiZUrOngCibe4TkHLRA.woff'\n}\n\nfunction Title({ material, texture, map, layers, ...props }) {\n  const group = useRef()\n  useEffect(() => {\n    group.current.lookAt(0, 0, 0)\n  }, [])\n\n  const textRef = useLayers(layers)\n\n  // const [hovered, hover] = useState(false)\n\n  return (\n    <group {...props} ref={group}\n    >\n      <Text\n        // onPointerOver={(event) => { hover(true); console.log(hovered) }}\n        // onPointerOut={(event) => { hover(false); console.log(hovered) }}\n        ref={textRef} name=\"text-olga\" depthTest={false} position={[0, -1, 0]} {...TEXT_PROPS}>\n        HELLO\n        <meshPhysicalMaterial envMap={texture} map={map} roughness={0} metalness={1} color=\"#FFFFFF\" />\n      </Text>\n    </group>\n  )\n}\n\nfunction Diamond({ map, texture, matcap, layers, ...props }) {\n  const ref = useLayers(layers)\n\n  useFrame(() => {\n    if (ref.current) {\n      ref.current.rotation.y += 0.001\n      ref.current.rotation.z += 0.01\n    }\n  })\n\n  return (\n    <mesh ref={ref} {...props}>\n      <meshMatcapMaterial matcap={matcap} transparent opacity={0.9} color=\"#14CEFF\" />\n    </mesh>\n  )\n}\n\nfunction Diamonds({ layers, ...props }) {\n  const [matcapTexture] = useMatcapTexture('2E763A_78A0B7_B3D1CF_14F209')\n  const { nodes } = useGLTFLoader(process.env.PUBLIC_URL + '/diamond.glb')\n\n  return (\n    <group name=\"diamonds\" {...props}>\n      {diamondsData.mirrors.map((mirror, index) => (\n        <Diamond\n          key={`diamond-${index}`}\n          name={`diamond-${index}`}\n          {...mirror}\n          geometry={nodes.Cylinder.geometry}\n          matcap={matcapTexture}\n          scale={[0.5, 0.5, 0.5]}\n          layers={layers}\n        />\n      ))}\n    </group>\n  )\n}\n\nfunction Background({ layers, ...props }) {\n  const ref = useLayers(layers)\n  // const [matcapTexture] = useMatcapTexture('BA5DBA_F2BEF2_E69BE6_DC8CDC')\n  const [matcapTexture] = useMatcapTexture('BAADA8_ECE6E7_9A8378_E3DCD3')\n\n  return (\n    <Octahedron ref={ref} name=\"background\" args={[20, 4, 4]} {...props}>\n      <meshMatcapMaterial matcap={matcapTexture} side={THREE.BackSide} color=\"#FFFFFF\" />\n    </Octahedron>\n  )\n}\n\nconst clickMe = () => {\n  // document.history.href.back();\n  window.history.back();\n  // console.log(hovered)\n  // document.location.href = 'http://localhost:8000'\n}\n\n\nfunction Scene() {\n  const [cubeCamera, renderTarget] = useRenderTarget()\n  const thinFilmFresnelMap = useMemo(() => new ThinFilmFresnelMap(410, 0, 5, 1024), [])\n  const group = useSlerp()\n\n  // const ref = useRef()\n  const [state, setState] = useState(false)\n  // this.state.hovered = false\n\n  // useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n\n  return (\n    state\n      ? <>\n        <Background layers={[0, 11]} position={[0, 0, -5]} />\n        <cubeCamera\n          layers={[11]}\n          name=\"cubeCamera\"\n          ref={cubeCamera}\n          args={[0.1, 100, renderTarget]}\n          position={[0, 0, -12]}\n        />\n        <group name=\"sceneContainer\" ref={group}>\n          {/* <Diamonds layers={[0, 11]} /> */}\n          <group name=\"text\" position={[0, 0, -5]}\n            onPointerOver={(event) => { setState(true); console.log(state) }}\n          >\n            <Title\n              // ref={ref}\n              // onPointerOut={(event) => { setState(false); console.log(state) }}\n              // onPointerOver={(event) => { hover(true); console.log(hovered) }}\n              // onPointerOut={(event) => { hover(false); console.log(hovered) }}\n              onClick={() => clickMe()}\n              layers={[0]} name=\"title\" texture={renderTarget.texture}\n              map={thinFilmFresnelMap} />\n          </group>\n        </group>\n      </>\n      : <>\n        <Background layers={[0, 11]} position={[0, 0, -5]} />\n        <cubeCamera\n          layers={[11]}\n          name=\"cubeCamera\"\n          ref={cubeCamera}\n          args={[0.1, 100, renderTarget]}\n          position={[0, 0, -12]}\n        />\n        <group name=\"sceneContainer\" ref={group}>\n          <Diamonds layers={[0, 11]} />\n          <group name=\"text\" position={[0, 0, -5]}\n            onPointerOver={(event) => { setState(true); console.log(state) }}\n            onPointerOut={(event) => { setState(false); console.log(state) }}\n          >\n            <Title\n              // ref={ref}\n              // onPointerOver={(event) => { hover(true); console.log(hovered) }}\n              // onPointerOut={(event) => { hover(false); console.log(hovered) }}\n              onClick={() => clickMe()}\n              layers={[0]} name=\"title\" texture={renderTarget.texture}\n              map={null} />\n          </group>\n        </group>\n      </>\n  )\n}\n\nexport default Scene\n"]},"metadata":{},"sourceType":"module"}